apiVersion: v1
kind: ConfigMap
metadata:
  name: 
  namespace:
data:
  values: |
    source_templates: # template to generate Flux GitRepository/OCIRepository resources
    # <repo-name>:
    #   kind:  GitRepository/OCIRepository
    #   spec:  # partial spec for a Flux resource
    #     url: https://gitlab.com/sylva-projects/sylva-core.git
    #     #secretRef: # is autogenerated based on 'auth'
    #     ref: # can be overridden per-unit, with 'ref_override'
    #       branch: main
    #   auth: # optional 'username'/'password' dict containing git authentication information
    #   existing_source: # optional, when this value is set the specified GitRepository or OCIRepository will be used instead of creating one based on 'spec'
    #     name: sylva-core
    #     kind: GitRepository or OCIRepository
      hello-world:
        kind: GitRepository
        spec:
          url: https://github.com/helm/examples.git
          ref: main

    units:
    # <unit-name>:
    #   info: # unit metadata mainly for documentation purpose
    #     description: <short unit description>
    #     details: <more detailed data about unit purpose and usage>
    #     maturity: <level of integration in sylva stack of corresponding component>
    #     internal: true <for units fully defined in sylva-core/kustomize-units without relying on external resources>
    #     version: <force declarative version, not recommended>
    #   enabled: boolean or GoTPL
    #   repo: <name of the repo under 'source_templates'> (for use with kustomization_spec)
    #   helm_repo_url: URL of the Helm repo to use (for use with helmrelease_spec, but not mandatory, 'repo' can be used as well to use a git repo)
    #   labels: (optional) dict holding labels to add to the resources for this unit
    #   ref_override: optional, if defined, this dict will be used for the GitRepository or OCIRepository overriding spec.ref (not used if some helm_repo_* is set)
    #   depends_on: dict defining the dependencies of this unit, keys are unit names, values are booleans
    #               (these dependencies are injected in the unit Kustomization via 'spec.dependsOn')
    #   helmrelease_spec:  # optionnal, contains a partial spec for a FluxCD HelmRelease, all the
    #                      # key things are generated from unit_helmrelease_spec_default
    #                      # and from other fields in the unit definition
    #     _postRenderers: # this field can be used in this file, it will be merged into user-provided 'postRenderers'
    #   helm_chart_artifact_name: optional, if specified, when deploying the Helm chart from an OCI artifact,
    #                             helm_chart_artifact_name will be used as chart name instead of helmrelease_spec.chart.spec.chart last path item
    #                             this is required if helmrelease_spec.chart.spec.chart is empty, '.' or '/'
    #                             (also used by tools/oci/push-helm-chart to generate the artifact)
    #   helm_chart_versions: optional, if specified, when deploying the Helm chart from an OCI artifact or Helm registry,
    #                             it will drive the version to be used from a dict of <version>:<boolean>
    #                             in case if helmrelease_spec.chart.spec.chart.version is not set
    #                             (also used by tools/oci/push-helm-charts-artifacts.sh to generate the artifact)
    #   kustomization_spec:  # contains a partial spec for a FluxCD Kustomization, most of the
    #                        # things are generated from unit_kustomization_spec_default
    #     # sourceRef is generated from .git_repo field
    #     path: ./path-to-unit-under-repo
    #     # the final path will hence be:
    #     # - <git repo template>.spec.url + <unit>.spec.path  (if <git repo template> has spec.url defined)
    #     _patches: # this field can be used in this file, it will be merged into user-provided 'patches'
    #     _components: # this field can be used in this file, it will be merged into user-provided 'components'
    #
    #   helm_secret_values: # (dict), if set what is put here is injected in HelmRelease.valuesFrom as a Secret
    #   kustomization_substitute_secrets: # (dict), if set what is put here is injected in Kustomization.postBuild.substituteFrom as a Secret
    #   unit_template: optional, today used only for units that use sylva-units itself
    #                  the settings for the unit are inherited from the corresponding entry under unit_templates
      
      hello-world:
        repo: hello-world
        enabled: true
        labels:
          app: hello-world
        helmrelease_spec:
          chart:
            spec:
              chart: examples/charts/hello-world
              version: 0.1.0
